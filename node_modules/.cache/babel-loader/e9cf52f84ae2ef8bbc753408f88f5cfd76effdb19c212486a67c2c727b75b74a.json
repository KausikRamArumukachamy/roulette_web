{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import './graphs.css';\n// import { Line } from 'react-chartjs-2';\n// import {\n//   Chart as ChartJS,\n//   CategoryScale,\n//   LinearScale,\n//   PointElement,\n//   LineElement,\n//   Title,\n//   Tooltip,\n//   Legend,\n// } from 'chart.js';\n\n// // Register Chart.js components\n// ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\n\n// function Graph() {\n//   const [lastDraw, setLastDraw] = useState('');\n//   const [responseMessage, setResponseMessage] = useState('');\n//   const [lastRow, setLastRow] = useState(null);\n//   const [redBlackData, setRedBlackData] = useState({\n//     red_statistics: [],\n//     black_statistics: [],\n//   });\n//   const [oddEvenData, setOddEvenData] = useState({\n//     odd_statistics: [],\n//     even_statistics: [],\n//   });\n//   const [lowHighData, setLowHighData] = useState({\n//     low_statistics: [],\n//     high_statistics: [],\n//   });\n\n//   // Fetch data on component mount\n//   useEffect(() => {\n//     fetchLastRow();\n//     fetchRedBlackData();\n//     fetchOddEvenData();\n//     fetchLowHighData();\n//   }, []);\n\n//   const handleAddLastDraw = async () => {\n//     if (isNaN(lastDraw) || lastDraw.trim() === '') {\n//       alert('Please enter a valid number for the last draw.');\n//       return;\n//     }\n\n//     try {\n//       const payload = { number: parseInt(lastDraw, 10) };\n\n//       const response = await fetch('http://localhost:8000/add-last-draw', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(payload),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Failed to send last draw to the backend.');\n//       }\n\n//       const data = await response.json();\n//       setResponseMessage(data.message || 'Last draw added successfully!');\n//       setLastDraw(''); // Clear the input field\n//       fetchLastRow(); // Refresh the last row\n//       fetchRedBlackData(); // Fetch updated red-black data\n//       fetchOddEvenData(); // Fetch updated odd-even data\n//       fetchLowHighData(); // Fetch updated low-high data\n//     } catch (error) {\n//       console.error('Error sending last draw:', error);\n//       alert('An error occurred while sending the last draw.');\n//     }\n//   };\n\n//   const handleRemoveLastDraw = async () => {\n//     try {\n//       const response = await fetch('http://localhost:8000/remove-last-draw', {\n//         method: 'DELETE',\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Failed to remove the last draw.');\n//       }\n\n//       const data = await response.json();\n//       setResponseMessage(data.message || 'Last draw removed successfully!');\n//       fetchLastRow(); // Refresh the last row\n\n//       // Remove last statistic from all lists\n//       setRedBlackData((prevData) => ({\n//         red_statistics: prevData.red_statistics.slice(0, -1),\n//         black_statistics: prevData.black_statistics.slice(0, -1),\n//       }));\n//       setOddEvenData((prevData) => ({\n//         odd_statistics: prevData.odd_statistics.slice(0, -1),\n//         even_statistics: prevData.even_statistics.slice(0, -1),\n//       }));\n//       setLowHighData((prevData) => ({\n//         low_statistics: prevData.low_statistics.slice(0, -1),\n//         high_statistics: prevData.high_statistics.slice(0, -1),\n//       }));\n//     } catch (error) {\n//       console.error('Error removing last draw:', error);\n//       alert('An error occurred while removing the last draw.');\n//     }\n//   };\n\n//   const fetchLastRow = async () => {\n//     try {\n//       const response = await fetch('http://localhost:8000/get-last-row');\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch last row');\n//       }\n//       const data = await response.json();\n//       setLastRow(data.last_row); // Update state with the last row data\n//     } catch (error) {\n//       console.error('Error fetching last row:', error);\n//       alert('An error occurred while fetching the last row.');\n//     }\n//   };\n\n//   // Fetch data for red-black, odd-even, and low-high stats\n//   const fetchRedBlackData = async () => {\n//     try {\n//       const response = await fetch('http://localhost:8000/get-redblack-stats');\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch red-black data');\n//       }\n\n//       const data = await response.json();\n//       setRedBlackData((prevData) => ({\n//         red_statistics: [...prevData.red_statistics, data.last_red_statistic],\n//         black_statistics: [...prevData.black_statistics, data.last_black_statistic],\n//       }));\n//     } catch (error) {\n//       console.error('Error fetching red-black data:', error);\n//       alert('An error occurred while fetching red-black data.');\n//     }\n//   };\n\n//   const fetchOddEvenData = async () => {\n//     try {\n//       const response = await fetch('http://localhost:8000/get-oddeven-stats');\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch odd-even data');\n//       }\n\n//       const data = await response.json();\n//       setOddEvenData((prevData) => ({\n//         odd_statistics: [...prevData.odd_statistics, data.last_odd_statistic],\n//         even_statistics: [...prevData.even_statistics, data.last_even_statistic],\n//       }));\n//     } catch (error) {\n//       console.error('Error fetching odd-even data:', error);\n//       alert('An error occurred while fetching odd-even data.');\n//     }\n//   };\n\n//   const fetchLowHighData = async () => {\n//     try {\n//       const response = await fetch('http://localhost:8000/get-lowhigh-stats');\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch low-high data');\n//       }\n\n//       const data = await response.json();\n//       setLowHighData((prevData) => ({\n//         low_statistics: [...prevData.low_statistics, data.last_low_statistic],\n//         high_statistics: [...prevData.high_statistics, data.last_high_statistic],\n//       }));\n//     } catch (error) {\n//       console.error('Error fetching low-high data:', error);\n//       alert('An error occurred while fetching low-high data.');\n//     }\n//   };\n\n//   // Chart data for Red-Black stats\n//   const redBlackChartData = {\n//     labels: redBlackData.red_statistics.map((_, index) => index + 1),\n//     datasets: [\n//       {\n//         label: 'Red Statistics',\n//         data: redBlackData.red_statistics,\n//         borderColor: 'red',\n//         fill: false,\n//       },\n//       {\n//         label: 'Black Statistics',\n//         data: redBlackData.black_statistics,\n//         borderColor: 'black',\n//         fill: false,\n//       },\n//     ],\n//   };\n\n//   // Chart data for Odd-Even stats\n//   const oddEvenChartData = {\n//     labels: oddEvenData.odd_statistics.map((_, index) => index + 1),\n//     datasets: [\n//       {\n//         label: 'Odd Statistics',\n//         data: oddEvenData.odd_statistics,\n//         borderColor: 'green',\n//         fill: false,\n//       },\n//       {\n//         label: 'Even Statistics',\n//         data: oddEvenData.even_statistics,\n//         borderColor: 'blue',\n//         fill: false,\n//       },\n//     ],\n//   };\n\n//   // Chart data for Low-High stats\n//   const lowHighChartData = {\n//     labels: lowHighData.low_statistics.map((_, index) => index + 1),\n//     datasets: [\n//       {\n//         label: 'Low Statistics',\n//         data: lowHighData.low_statistics,\n//         borderColor: 'orange',\n//         fill: false,\n//       },\n//       {\n//         label: 'High Statistics',\n//         data: lowHighData.high_statistics,\n//         borderColor: 'purple',\n//         fill: false,\n//       },\n//     ],\n//   };\n\n//   return (\n//     <div className=\"graph\">\n//       {/* Last Draw Section */}\n//       <div className=\"last-draw-container\">\n//         <label htmlFor=\"last-draw\" className=\"last-draw-label\">\n//           Last Draw:\n//         </label>\n//         <input\n//           type=\"number\"\n//           id=\"last-draw\"\n//           placeholder=\"Enter last draw\"\n//           className=\"last-draw-input\"\n//           value={lastDraw}\n//           onChange={(e) => setLastDraw(e.target.value)}\n//         />\n//         <div className=\"last-draw-buttons\">\n//           <button className=\"last-draw-button\" onClick={handleAddLastDraw}>\n//             Add Last Draw\n//           </button>\n//           <button className=\"last-draw-button\" onClick={handleRemoveLastDraw}>\n//             Remove Last Draw\n//           </button>\n//         </div>\n//       </div>\n\n//       {responseMessage && <p className=\"response-message\">{responseMessage}</p>}\n\n//       <div className=\"graph-container\">\n//         {/* Dataframe Section */}\n//         <div className=\"graph-item\">\n//           <h4>Dataframe</h4>\n//           {lastRow ? (\n//             <div className=\"dataframe-table-container\">\n//               <table className=\"dataframe-table\">\n//                 <thead>\n//                   <tr>\n//                     <th>Number</th>\n//                     <th>Colour</th>\n//                     <th>Odd/Even</th>\n//                     <th>High/Low</th>\n//                     <th>Red Statistic</th>\n//                     <th>Black Statistic</th>\n//                     <th>Odd Statistic</th>\n//                     <th>Even Statistic</th>\n//                     <th>High Statistic</th>\n//                     <th>Low Statistic</th>\n//                   </tr>\n//                 </thead>\n//                 <tbody>\n//                   <tr>\n//                     <td>{lastRow.number}</td>\n//                     <td>{lastRow.colour}</td>\n//                     <td>{lastRow.odd_even}</td>\n//                     <td>{lastRow.high_low}</td>\n//                     <td>{lastRow.red_statistic}</td>\n//                     <td>{lastRow.black_statistic}</td>\n//                     <td>{lastRow.odd_statistic}</td>\n//                     <td>{lastRow.even_statistic}</td>\n//                     <td>{lastRow.high_statistic}</td>\n//                     <td>{lastRow.low_statistic}</td>\n//                   </tr>\n//                 </tbody>\n//               </table>\n//             </div>\n//           ) : (\n//             <p>Loading last row...</p>\n//           )}\n//         </div>\n\n//         {/* Graphs Section */}\n//         <div className=\"graph-item\">\n//           <h4>Red-Black Graph</h4>\n//           <div className=\"graph-placeholder\">\n//             <Line data={redBlackChartData} />\n//           </div>\n//         </div>\n\n//         <div className=\"graph-item\">\n//           <h4>Odd-Even Graph</h4>\n//           <div className=\"graph-placeholder\">\n//             <Line data={oddEvenChartData} />\n//           </div>\n//         </div>\n\n//         <div className=\"graph-item\">\n//           <h4>Low-High Graph</h4>\n//           <div className=\"graph-placeholder\">\n//             <Line data={lowHighChartData} />\n//           </div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Graph;","map":{"version":3,"names":[],"sources":["D:/roulette_app/roulette_fe/src/tabs/graphs.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import './graphs.css';\r\n// import { Line } from 'react-chartjs-2';\r\n// import {\r\n//   Chart as ChartJS,\r\n//   CategoryScale,\r\n//   LinearScale,\r\n//   PointElement,\r\n//   LineElement,\r\n//   Title,\r\n//   Tooltip,\r\n//   Legend,\r\n// } from 'chart.js';\r\n\r\n// // Register Chart.js components\r\n// ChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\r\n\r\n// function Graph() {\r\n//   const [lastDraw, setLastDraw] = useState('');\r\n//   const [responseMessage, setResponseMessage] = useState('');\r\n//   const [lastRow, setLastRow] = useState(null);\r\n//   const [redBlackData, setRedBlackData] = useState({\r\n//     red_statistics: [],\r\n//     black_statistics: [],\r\n//   });\r\n//   const [oddEvenData, setOddEvenData] = useState({\r\n//     odd_statistics: [],\r\n//     even_statistics: [],\r\n//   });\r\n//   const [lowHighData, setLowHighData] = useState({\r\n//     low_statistics: [],\r\n//     high_statistics: [],\r\n//   });\r\n\r\n//   // Fetch data on component mount\r\n//   useEffect(() => {\r\n//     fetchLastRow();\r\n//     fetchRedBlackData();\r\n//     fetchOddEvenData();\r\n//     fetchLowHighData();\r\n//   }, []);\r\n\r\n//   const handleAddLastDraw = async () => {\r\n//     if (isNaN(lastDraw) || lastDraw.trim() === '') {\r\n//       alert('Please enter a valid number for the last draw.');\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const payload = { number: parseInt(lastDraw, 10) };\r\n\r\n//       const response = await fetch('http://localhost:8000/add-last-draw', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(payload),\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to send last draw to the backend.');\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       setResponseMessage(data.message || 'Last draw added successfully!');\r\n//       setLastDraw(''); // Clear the input field\r\n//       fetchLastRow(); // Refresh the last row\r\n//       fetchRedBlackData(); // Fetch updated red-black data\r\n//       fetchOddEvenData(); // Fetch updated odd-even data\r\n//       fetchLowHighData(); // Fetch updated low-high data\r\n//     } catch (error) {\r\n//       console.error('Error sending last draw:', error);\r\n//       alert('An error occurred while sending the last draw.');\r\n//     }\r\n//   };\r\n\r\n//   const handleRemoveLastDraw = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:8000/remove-last-draw', {\r\n//         method: 'DELETE',\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to remove the last draw.');\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       setResponseMessage(data.message || 'Last draw removed successfully!');\r\n//       fetchLastRow(); // Refresh the last row\r\n\r\n//       // Remove last statistic from all lists\r\n//       setRedBlackData((prevData) => ({\r\n//         red_statistics: prevData.red_statistics.slice(0, -1),\r\n//         black_statistics: prevData.black_statistics.slice(0, -1),\r\n//       }));\r\n//       setOddEvenData((prevData) => ({\r\n//         odd_statistics: prevData.odd_statistics.slice(0, -1),\r\n//         even_statistics: prevData.even_statistics.slice(0, -1),\r\n//       }));\r\n//       setLowHighData((prevData) => ({\r\n//         low_statistics: prevData.low_statistics.slice(0, -1),\r\n//         high_statistics: prevData.high_statistics.slice(0, -1),\r\n//       }));\r\n//     } catch (error) {\r\n//       console.error('Error removing last draw:', error);\r\n//       alert('An error occurred while removing the last draw.');\r\n//     }\r\n//   };\r\n\r\n//   const fetchLastRow = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:8000/get-last-row');\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to fetch last row');\r\n//       }\r\n//       const data = await response.json();\r\n//       setLastRow(data.last_row); // Update state with the last row data\r\n//     } catch (error) {\r\n//       console.error('Error fetching last row:', error);\r\n//       alert('An error occurred while fetching the last row.');\r\n//     }\r\n//   };\r\n\r\n//   // Fetch data for red-black, odd-even, and low-high stats\r\n//   const fetchRedBlackData = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:8000/get-redblack-stats');\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to fetch red-black data');\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       setRedBlackData((prevData) => ({\r\n//         red_statistics: [...prevData.red_statistics, data.last_red_statistic],\r\n//         black_statistics: [...prevData.black_statistics, data.last_black_statistic],\r\n//       }));\r\n//     } catch (error) {\r\n//       console.error('Error fetching red-black data:', error);\r\n//       alert('An error occurred while fetching red-black data.');\r\n//     }\r\n//   };\r\n\r\n//   const fetchOddEvenData = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:8000/get-oddeven-stats');\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to fetch odd-even data');\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       setOddEvenData((prevData) => ({\r\n//         odd_statistics: [...prevData.odd_statistics, data.last_odd_statistic],\r\n//         even_statistics: [...prevData.even_statistics, data.last_even_statistic],\r\n//       }));\r\n//     } catch (error) {\r\n//       console.error('Error fetching odd-even data:', error);\r\n//       alert('An error occurred while fetching odd-even data.');\r\n//     }\r\n//   };\r\n\r\n//   const fetchLowHighData = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:8000/get-lowhigh-stats');\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to fetch low-high data');\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       setLowHighData((prevData) => ({\r\n//         low_statistics: [...prevData.low_statistics, data.last_low_statistic],\r\n//         high_statistics: [...prevData.high_statistics, data.last_high_statistic],\r\n//       }));\r\n//     } catch (error) {\r\n//       console.error('Error fetching low-high data:', error);\r\n//       alert('An error occurred while fetching low-high data.');\r\n//     }\r\n//   };\r\n\r\n//   // Chart data for Red-Black stats\r\n//   const redBlackChartData = {\r\n//     labels: redBlackData.red_statistics.map((_, index) => index + 1),\r\n//     datasets: [\r\n//       {\r\n//         label: 'Red Statistics',\r\n//         data: redBlackData.red_statistics,\r\n//         borderColor: 'red',\r\n//         fill: false,\r\n//       },\r\n//       {\r\n//         label: 'Black Statistics',\r\n//         data: redBlackData.black_statistics,\r\n//         borderColor: 'black',\r\n//         fill: false,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Chart data for Odd-Even stats\r\n//   const oddEvenChartData = {\r\n//     labels: oddEvenData.odd_statistics.map((_, index) => index + 1),\r\n//     datasets: [\r\n//       {\r\n//         label: 'Odd Statistics',\r\n//         data: oddEvenData.odd_statistics,\r\n//         borderColor: 'green',\r\n//         fill: false,\r\n//       },\r\n//       {\r\n//         label: 'Even Statistics',\r\n//         data: oddEvenData.even_statistics,\r\n//         borderColor: 'blue',\r\n//         fill: false,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   // Chart data for Low-High stats\r\n//   const lowHighChartData = {\r\n//     labels: lowHighData.low_statistics.map((_, index) => index + 1),\r\n//     datasets: [\r\n//       {\r\n//         label: 'Low Statistics',\r\n//         data: lowHighData.low_statistics,\r\n//         borderColor: 'orange',\r\n//         fill: false,\r\n//       },\r\n//       {\r\n//         label: 'High Statistics',\r\n//         data: lowHighData.high_statistics,\r\n//         borderColor: 'purple',\r\n//         fill: false,\r\n//       },\r\n//     ],\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"graph\">\r\n//       {/* Last Draw Section */}\r\n//       <div className=\"last-draw-container\">\r\n//         <label htmlFor=\"last-draw\" className=\"last-draw-label\">\r\n//           Last Draw:\r\n//         </label>\r\n//         <input\r\n//           type=\"number\"\r\n//           id=\"last-draw\"\r\n//           placeholder=\"Enter last draw\"\r\n//           className=\"last-draw-input\"\r\n//           value={lastDraw}\r\n//           onChange={(e) => setLastDraw(e.target.value)}\r\n//         />\r\n//         <div className=\"last-draw-buttons\">\r\n//           <button className=\"last-draw-button\" onClick={handleAddLastDraw}>\r\n//             Add Last Draw\r\n//           </button>\r\n//           <button className=\"last-draw-button\" onClick={handleRemoveLastDraw}>\r\n//             Remove Last Draw\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {responseMessage && <p className=\"response-message\">{responseMessage}</p>}\r\n\r\n//       <div className=\"graph-container\">\r\n//         {/* Dataframe Section */}\r\n//         <div className=\"graph-item\">\r\n//           <h4>Dataframe</h4>\r\n//           {lastRow ? (\r\n//             <div className=\"dataframe-table-container\">\r\n//               <table className=\"dataframe-table\">\r\n//                 <thead>\r\n//                   <tr>\r\n//                     <th>Number</th>\r\n//                     <th>Colour</th>\r\n//                     <th>Odd/Even</th>\r\n//                     <th>High/Low</th>\r\n//                     <th>Red Statistic</th>\r\n//                     <th>Black Statistic</th>\r\n//                     <th>Odd Statistic</th>\r\n//                     <th>Even Statistic</th>\r\n//                     <th>High Statistic</th>\r\n//                     <th>Low Statistic</th>\r\n//                   </tr>\r\n//                 </thead>\r\n//                 <tbody>\r\n//                   <tr>\r\n//                     <td>{lastRow.number}</td>\r\n//                     <td>{lastRow.colour}</td>\r\n//                     <td>{lastRow.odd_even}</td>\r\n//                     <td>{lastRow.high_low}</td>\r\n//                     <td>{lastRow.red_statistic}</td>\r\n//                     <td>{lastRow.black_statistic}</td>\r\n//                     <td>{lastRow.odd_statistic}</td>\r\n//                     <td>{lastRow.even_statistic}</td>\r\n//                     <td>{lastRow.high_statistic}</td>\r\n//                     <td>{lastRow.low_statistic}</td>\r\n//                   </tr>\r\n//                 </tbody>\r\n//               </table>\r\n//             </div>\r\n//           ) : (\r\n//             <p>Loading last row...</p>\r\n//           )}\r\n//         </div>\r\n\r\n//         {/* Graphs Section */}\r\n//         <div className=\"graph-item\">\r\n//           <h4>Red-Black Graph</h4>\r\n//           <div className=\"graph-placeholder\">\r\n//             <Line data={redBlackChartData} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"graph-item\">\r\n//           <h4>Odd-Even Graph</h4>\r\n//           <div className=\"graph-placeholder\">\r\n//             <Line data={oddEvenChartData} />\r\n//           </div>\r\n//         </div>\r\n\r\n//         <div className=\"graph-item\">\r\n//           <h4>Low-High Graph</h4>\r\n//           <div className=\"graph-placeholder\">\r\n//             <Line data={lowHighChartData} />\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Graph;\r\n\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}