{"ast":null,"code":"var _jsxFileName = \"D:\\\\roulette_app\\\\roulette_fe\\\\src\\\\tabs\\\\stats.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './stats.css';\nimport rouletteImage from '../roulette_img.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Stats() {\n  _s();\n  const categories = ['Red', 'Black', 'Odd', 'Even', 'High', 'Low'];\n  const [numbers, setNumbers] = useState({\n    Red: '',\n    Black: '',\n    Odd: '',\n    Even: '',\n    High: '',\n    Low: ''\n  });\n  const [total_count, setTotal_count] = useState('');\n  const [invalidFields, setInvalidFields] = useState({});\n  const [responseMessage, setResponseMessage] = useState('');\n  const handleInputChange = (key, value) => {\n    setNumbers(prev => ({\n      ...prev,\n      [key]: value\n    }));\n    setInvalidFields(prev => ({\n      ...prev,\n      [key]: false\n    })); // Reset invalid state\n  };\n  const handleOkClick = async () => {\n    const newInvalidFields = {};\n\n    // Validate each field\n    Object.entries(numbers).forEach(([key, value]) => {\n      const numValue = parseFloat(value);\n      if (isNaN(numValue) || value.trim() === '') {\n        newInvalidFields[key] = true;\n      }\n    });\n    const totalCountValue = parseInt(total_count, 10); // Make sure total_count is an integer\n    if (isNaN(totalCountValue) || total_count.trim() === '') {\n      newInvalidFields['Total Count'] = true;\n    }\n    if (Object.keys(newInvalidFields).length > 0) {\n      setInvalidFields(newInvalidFields);\n      alert('Please enter valid numbers in all fields.');\n      return;\n    }\n\n    // Prepare the data with correct types\n    const statsData = {\n      red_statistic: parseFloat(numbers.Red),\n      black_statistic: parseFloat(numbers.Black),\n      odd_statistic: parseFloat(numbers.Odd),\n      even_statistic: parseFloat(numbers.Even),\n      high_statistic: parseFloat(numbers.High),\n      low_statistic: parseFloat(numbers.Low),\n      total_count: totalCountValue\n    };\n    try {\n      // Make the API call to send the data to the backend\n      const response = await fetch('http://localhost:8000/update-stats', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(statsData)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to send stats');\n      }\n      const data = await response.json();\n      setResponseMessage(data.message || 'Stats added successfully!');\n    } catch (error) {\n      console.error(error);\n      alert('An error occurred while sending stats.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Stats\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"Stats-header\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: rouletteImage,\n        className: \"Stats-logo\",\n        alt: \"roulette logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"inputs-container\",\n      children: [categories.map(category => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"number-inputs\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          children: `${category} %`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: `${category} %`,\n          value: numbers[category],\n          onChange: e => handleInputChange(category, e.target.value),\n          className: invalidFields[category] ? 'invalid' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this)]\n      }, category, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"number-inputs\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          className: \"input-label\",\n          children: `Total Count`\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          placeholder: \"Total Count\",\n          value: total_count,\n          onChange: e => setTotal_count(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ok-button\",\n        onClick: handleOkClick,\n        children: \"OK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(Stats, \"vi/s2YuVXsTRoPrTtwwsME35GWU=\");\n_c = Stats;\nexport default Stats;\nvar _c;\n$RefreshReg$(_c, \"Stats\");","map":{"version":3,"names":["React","useState","rouletteImage","jsxDEV","_jsxDEV","Stats","_s","categories","numbers","setNumbers","Red","Black","Odd","Even","High","Low","total_count","setTotal_count","invalidFields","setInvalidFields","responseMessage","setResponseMessage","handleInputChange","key","value","prev","handleOkClick","newInvalidFields","Object","entries","forEach","numValue","parseFloat","isNaN","trim","totalCountValue","parseInt","keys","length","alert","statsData","red_statistic","black_statistic","odd_statistic","even_statistic","high_statistic","low_statistic","response","fetch","method","headers","body","JSON","stringify","ok","Error","data","json","message","error","console","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","category","type","placeholder","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/roulette_app/roulette_fe/src/tabs/stats.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './stats.css';\r\nimport rouletteImage from '../roulette_img.png';\r\n\r\nfunction Stats() {\r\n  const categories = ['Red', 'Black', 'Odd', 'Even', 'High', 'Low'];\r\n\r\n  const [numbers, setNumbers] = useState({\r\n    Red: '',\r\n    Black: '',\r\n    Odd: '',\r\n    Even: '',\r\n    High: '',\r\n    Low: '',\r\n  });\r\n\r\n  const [total_count, setTotal_count] = useState('');\r\n  const [invalidFields, setInvalidFields] = useState({});\r\n  const [responseMessage, setResponseMessage] = useState('');\r\n\r\n  const handleInputChange = (key, value) => {\r\n    setNumbers((prev) => ({ ...prev, [key]: value }));\r\n    setInvalidFields((prev) => ({ ...prev, [key]: false })); // Reset invalid state\r\n  };\r\n\r\n  const handleOkClick = async () => {\r\n    const newInvalidFields = {};\r\n\r\n    // Validate each field\r\n    Object.entries(numbers).forEach(([key, value]) => {\r\n      const numValue = parseFloat(value);\r\n      if (isNaN(numValue) || value.trim() === '') {\r\n        newInvalidFields[key] = true;\r\n      }\r\n    });\r\n\r\n    const totalCountValue = parseInt(total_count, 10);  // Make sure total_count is an integer\r\n    if (isNaN(totalCountValue) || total_count.trim() === '') {\r\n      newInvalidFields['Total Count'] = true;\r\n    }\r\n\r\n    if (Object.keys(newInvalidFields).length > 0) {\r\n      setInvalidFields(newInvalidFields);\r\n      alert('Please enter valid numbers in all fields.');\r\n      return;\r\n    }\r\n\r\n    // Prepare the data with correct types\r\n    const statsData = { \r\n      red_statistic: parseFloat(numbers.Red),\r\n      black_statistic: parseFloat(numbers.Black),\r\n      odd_statistic: parseFloat(numbers.Odd),\r\n      even_statistic: parseFloat(numbers.Even),\r\n      high_statistic: parseFloat(numbers.High),\r\n      low_statistic: parseFloat(numbers.Low),\r\n      total_count: totalCountValue\r\n    };\r\n\r\n    try {\r\n      // Make the API call to send the data to the backend\r\n      const response = await fetch('http://localhost:8000/update-stats', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(statsData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to send stats');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setResponseMessage(data.message || 'Stats added successfully!');\r\n    } catch (error) {\r\n      console.error(error);\r\n      alert('An error occurred while sending stats.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Stats\">\r\n      <header className=\"Stats-header\">\r\n        <img src={rouletteImage} className=\"Stats-logo\" alt=\"roulette logo\" />\r\n      </header>\r\n\r\n      <div className=\"inputs-container\">\r\n        {categories.map((category) => (\r\n          <div className=\"number-inputs\" key={category}>\r\n            <label className=\"input-label\">{`${category} %`}</label>\r\n            <input\r\n              type=\"number\"\r\n              placeholder={`${category} %`}\r\n              value={numbers[category]}\r\n              onChange={(e) => handleInputChange(category, e.target.value)}\r\n              className={invalidFields[category] ? 'invalid' : ''}\r\n            />\r\n          </div>\r\n        ))}\r\n        <div className=\"number-inputs\">\r\n          <label className=\"input-label\">{`Total Count`}</label>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"Total Count\"\r\n            value={total_count}\r\n            onChange={(e) => setTotal_count(e.target.value)}\r\n          />\r\n        </div>\r\n\r\n        <button className=\"ok-button\" onClick={handleOkClick}>\r\n          OK\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Stats;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}