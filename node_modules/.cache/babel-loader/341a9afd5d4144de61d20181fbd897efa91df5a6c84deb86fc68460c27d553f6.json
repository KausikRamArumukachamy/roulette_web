{"ast":null,"code":"var _jsxFileName = \"D:\\\\roulette_app\\\\roulette_fe\\\\src\\\\StackedTab.js\",\n  _s = $RefreshSig$();\n// import './StackedTab.css';\n// import rouletteImage from './roulette_img.png';\n\n// function StackedTab() {\n//   return (\n//     <div className=\"StackedApp\">\n//       <header className=\"StackedApp-header\">\n//         <img src={rouletteImage} className=\"StackedApp-logo\" alt=\"roulette logo\" />\n//         <p>It works!</p>\n//       </header>\n//     </div>\n//   );\n// }\n\n// export default StackedTab;\n\n// import './StackedTab.css';\n// import rouletteImage from './roulette_img.png';\n// import {useState} from 'react';\n\n// function StackedTab() {\n\n//     const [number1, setNumber1] = useState('');\n//     const [number2, setNumber2] = useState('');\n//     const [number3, setNumber3] = useState('');\n//     const [number4, setNumber4] = useState('');\n//     const [number5, setNumber5] = useState('');\n//     const [number6, setNumber6] = useState('');\n\n//     const [invalid,setInvalid] = useState(false);\n\n//     const handleOkclick = () =>{\n\n//         const numbers = [number1, number2, number3, number4, number5, number6];\n//         const areAllNumbersValid = numbers.every(num => !isNaN(num) && num !== '');\n\n//         if(\n//             isNaN(number1) ||\n//             isNaN(number2) ||\n//             isNaN(number3) ||\n//             isNaN(number4) ||\n//             isNaN(number5) ||\n//             isNaN(number6)\n//         ) {\n//             setInvalid(true);\n//             alert('Please enter valid numbers');\n//             return;\n//         }\n\n//         setInvalid(false);\n//         console.log('Number 1:', number1);\n//         console.log('Number 2:', number2);\n//         console.log('Number 3:', number3);\n//         console.log('Number 4:', number4);\n//         console.log('Number 5:', number5);\n//         console.log('Number 6:', number6);\n//         alert(`Numbers entered: ${number1}, ${number2}, ${number3},${number4}, ${number5}, ${number6}`);\n//     };\n\n//     return (\n//         <div className=\"StackedApp\">\n//           <header className=\"StackedApp-header\">\n//             <img src={rouletteImage} className=\"StackedApp-logo\" alt=\"roulette logo\" />\n//             <div className='number-inputs'>\n//                 <input\n//                     type='text'\n//                     placeholder='Odd_percentage'\n//                     value={number1}\n//                     onChange={(e)=>setNumber1(e.target.value)}\n//                     className={invalid && isNaN(number1) ? 'invalid':''}/>\n//             </div>\n//             <div className='number-inputs'>\n//                 <input \n//                         type='text'\n//                         placeholder='Even_percentage'\n//                         value={number2}\n//                         onChange={(e)=>setNumber2(e.target.value)}\n//                         className={invalid && isNaN(number2) ? 'invalid':''}/>\n//             </div>\n\n//             <div className='number-inputs'>\n//                 <input\n//                         type='text'\n//                         placeholder='Red_percentage'\n//                         value={number3}\n//                         onChange={(e)=>setNumber3(e.target.value)}\n//                         className={invalid && isNaN(number3) ? 'invalid':''}/>\n//             </div>\n\n//             <div className='number-inputs'>\n//                 <input\n//                         type='text'\n//                         placeholder='Black_percentage'\n//                         value={number4}\n//                         onChange={(e)=>setNumber4(e.target.value)}\n//                         className={invalid && isNaN(number4) ? 'invalid':''}/>\n//             </div>\n\n//             <div>\n//                 <input\n//                         type='text'\n//                         placeholder='Low_percenatge'\n//                         value={number5}\n//                         onChange={(e)=>setNumber5(e.target.value)}\n//                         className={invalid && isNaN(number5) ? 'invalid':''}/>\n//             </div>\n\n//             <div>\n//                 <input\n//                         type='text'\n//                         placeholder='High_percentage'\n//                         value={number6}\n//                         onChange={(e)=>setNumber6(e.target.value)}\n//                         className={invalid && isNaN(number6) ? 'invalid':''}/>\n//             </div>\n\n//             <button className='ok-button' onClick={handleOkclick}>\n//                 OK\n//             </button>\n//           </header>\n//         </div>\n//       );\n// }\n\n// export default StackedTab;\n\nimport './StackedTab.css';\nimport rouletteImage from './roulette_img.png';\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction StackedTab() {\n  _s();\n  const categories = ['Odd', 'Even', 'Low', 'High', 'Red', 'Black'];\n  const [numbers, setNumbers] = useState({\n    Odd: '',\n    Even: '',\n    Low: '',\n    High: '',\n    Red: '',\n    Black: ''\n  });\n  const [invalidFields, setInvalidFields] = useState({});\n  const handleInputChange = (key, value) => {\n    setNumbers(prev => ({\n      ...prev,\n      [key]: value\n    }));\n    setInvalidFields(prev => ({\n      ...prev,\n      [key]: false\n    })); // Reset invalid state\n  };\n  const handleOkClick = () => {\n    const newInvalidFields = {};\n\n    // Validate each field\n    Object.entries(numbers).forEach(([key, value]) => {\n      if (isNaN(value) || value.trim() === '') {\n        newInvalidFields[key] = true;\n      }\n    });\n    if (Object.keys(newInvalidFields).length > 0) {\n      setInvalidFields(newInvalidFields);\n      alert('Please enter valid numbers in all fields.');\n      return;\n    }\n    alert(`Numbers entered: ${Object.values(numbers).join(', ')}`);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"StackedApp\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"StackedApp-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: rouletteImage,\n        className: \"StackedApp-logo\",\n        alt: \"roulette logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), categories.map(category => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"number-inputs\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\" // Restrict input to numbers\n          ,\n          placeholder: `${category}_percentage`,\n          value: numbers[category],\n          onChange: e => handleInputChange(category, e.target.value),\n          className: invalidFields[category] ? 'invalid' : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this)\n      }, category, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"ok-button\",\n        onClick: handleOkClick,\n        children: \"OK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 5\n  }, this);\n}\n_s(StackedTab, \"A4qltehnyJu1/mMU4hxRrOwE/V4=\");\n_c = StackedTab;\nexport default StackedTab;\nvar _c;\n$RefreshReg$(_c, \"StackedTab\");","map":{"version":3,"names":["rouletteImage","useState","jsxDEV","_jsxDEV","StackedTab","_s","categories","numbers","setNumbers","Odd","Even","Low","High","Red","Black","invalidFields","setInvalidFields","handleInputChange","key","value","prev","handleOkClick","newInvalidFields","Object","entries","forEach","isNaN","trim","keys","length","alert","values","join","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","map","category","type","placeholder","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["D:/roulette_app/roulette_fe/src/StackedTab.js"],"sourcesContent":["// import './StackedTab.css';\r\n// import rouletteImage from './roulette_img.png';\r\n\r\n// function StackedTab() {\r\n//   return (\r\n//     <div className=\"StackedApp\">\r\n//       <header className=\"StackedApp-header\">\r\n//         <img src={rouletteImage} className=\"StackedApp-logo\" alt=\"roulette logo\" />\r\n//         <p>It works!</p>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default StackedTab;\r\n\r\n\r\n// import './StackedTab.css';\r\n// import rouletteImage from './roulette_img.png';\r\n// import {useState} from 'react';\r\n\r\n// function StackedTab() {\r\n\r\n//     const [number1, setNumber1] = useState('');\r\n//     const [number2, setNumber2] = useState('');\r\n//     const [number3, setNumber3] = useState('');\r\n//     const [number4, setNumber4] = useState('');\r\n//     const [number5, setNumber5] = useState('');\r\n//     const [number6, setNumber6] = useState('');\r\n\r\n//     const [invalid,setInvalid] = useState(false);\r\n\r\n//     const handleOkclick = () =>{\r\n\r\n//         const numbers = [number1, number2, number3, number4, number5, number6];\r\n//         const areAllNumbersValid = numbers.every(num => !isNaN(num) && num !== '');\r\n        \r\n//         if(\r\n//             isNaN(number1) ||\r\n//             isNaN(number2) ||\r\n//             isNaN(number3) ||\r\n//             isNaN(number4) ||\r\n//             isNaN(number5) ||\r\n//             isNaN(number6)\r\n//         ) {\r\n//             setInvalid(true);\r\n//             alert('Please enter valid numbers');\r\n//             return;\r\n//         }\r\n\r\n//         setInvalid(false);\r\n//         console.log('Number 1:', number1);\r\n//         console.log('Number 2:', number2);\r\n//         console.log('Number 3:', number3);\r\n//         console.log('Number 4:', number4);\r\n//         console.log('Number 5:', number5);\r\n//         console.log('Number 6:', number6);\r\n//         alert(`Numbers entered: ${number1}, ${number2}, ${number3},${number4}, ${number5}, ${number6}`);\r\n//     };\r\n\r\n//     return (\r\n//         <div className=\"StackedApp\">\r\n//           <header className=\"StackedApp-header\">\r\n//             <img src={rouletteImage} className=\"StackedApp-logo\" alt=\"roulette logo\" />\r\n//             <div className='number-inputs'>\r\n//                 <input\r\n//                     type='text'\r\n//                     placeholder='Odd_percentage'\r\n//                     value={number1}\r\n//                     onChange={(e)=>setNumber1(e.target.value)}\r\n//                     className={invalid && isNaN(number1) ? 'invalid':''}/>\r\n//             </div>\r\n//             <div className='number-inputs'>\r\n//                 <input \r\n//                         type='text'\r\n//                         placeholder='Even_percentage'\r\n//                         value={number2}\r\n//                         onChange={(e)=>setNumber2(e.target.value)}\r\n//                         className={invalid && isNaN(number2) ? 'invalid':''}/>\r\n//             </div>\r\n\r\n//             <div className='number-inputs'>\r\n//                 <input\r\n//                         type='text'\r\n//                         placeholder='Red_percentage'\r\n//                         value={number3}\r\n//                         onChange={(e)=>setNumber3(e.target.value)}\r\n//                         className={invalid && isNaN(number3) ? 'invalid':''}/>\r\n//             </div>\r\n\r\n//             <div className='number-inputs'>\r\n//                 <input\r\n//                         type='text'\r\n//                         placeholder='Black_percentage'\r\n//                         value={number4}\r\n//                         onChange={(e)=>setNumber4(e.target.value)}\r\n//                         className={invalid && isNaN(number4) ? 'invalid':''}/>\r\n//             </div>\r\n\r\n//             <div>\r\n//                 <input\r\n//                         type='text'\r\n//                         placeholder='Low_percenatge'\r\n//                         value={number5}\r\n//                         onChange={(e)=>setNumber5(e.target.value)}\r\n//                         className={invalid && isNaN(number5) ? 'invalid':''}/>\r\n//             </div>\r\n                \r\n//             <div>\r\n//                 <input\r\n//                         type='text'\r\n//                         placeholder='High_percentage'\r\n//                         value={number6}\r\n//                         onChange={(e)=>setNumber6(e.target.value)}\r\n//                         className={invalid && isNaN(number6) ? 'invalid':''}/>\r\n//             </div>\r\n                 \r\n//             <button className='ok-button' onClick={handleOkclick}>\r\n//                 OK\r\n//             </button>\r\n//           </header>\r\n//         </div>\r\n//       );\r\n// }\r\n\r\n// export default StackedTab;\r\n\r\n\r\nimport './StackedTab.css';\r\nimport rouletteImage from './roulette_img.png';\r\nimport { useState } from 'react';\r\n\r\nfunction StackedTab() {\r\n  const categories = ['Odd','Even','Low','High','Red','Black'];\r\n\r\n  const [numbers, setNumbers] = useState({\r\n    Odd: '',\r\n    Even: '',\r\n    Low: '',\r\n    High: '',\r\n    Red: '',\r\n    Black: '',\r\n  });\r\n\r\n  const [invalidFields, setInvalidFields] = useState({});\r\n\r\n  const handleInputChange = (key, value) => {\r\n    setNumbers((prev) => ({ ...prev, [key]: value }));\r\n    setInvalidFields((prev) => ({ ...prev, [key]: false })); // Reset invalid state\r\n  };\r\n\r\n  const handleOkClick = () => {\r\n    const newInvalidFields = {};\r\n\r\n    // Validate each field\r\n    Object.entries(numbers).forEach(([key, value]) => {\r\n      if (isNaN(value) || value.trim() === '') {\r\n        newInvalidFields[key] = true;\r\n      }\r\n    });\r\n\r\n    if (Object.keys(newInvalidFields).length > 0) {\r\n      setInvalidFields(newInvalidFields);\r\n      alert('Please enter valid numbers in all fields.');\r\n      return;\r\n    }\r\n\r\n    alert(`Numbers entered: ${Object.values(numbers).join(', ')}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"StackedApp\">\r\n      <header className=\"StackedApp-header\">\r\n        <img src={rouletteImage} className=\"StackedApp-logo\" alt=\"roulette logo\" />\r\n\r\n        {categories.map((category) => (\r\n          <div className=\"number-inputs\" key={category}>\r\n            <input\r\n              type=\"number\" // Restrict input to numbers\r\n              placeholder={`${category}_percentage`}\r\n              value={numbers[category]}\r\n              onChange={(e) => handleInputChange(category, e.target.value)}\r\n              className={invalidFields[category] ? 'invalid' : ''}\r\n            />\r\n          </div>\r\n        ))}\r\n\r\n        <button className=\"ok-button\" onClick={handleOkClick}>\r\n          OK\r\n        </button>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default StackedTab;\r\n\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA,OAAO,kBAAkB;AACzB,OAAOA,aAAa,MAAM,oBAAoB;AAC9C,SAASC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAMC,UAAU,GAAG,CAAC,KAAK,EAAC,MAAM,EAAC,KAAK,EAAC,MAAM,EAAC,KAAK,EAAC,OAAO,CAAC;EAE5D,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC;IACrCQ,GAAG,EAAE,EAAE;IACPC,IAAI,EAAE,EAAE;IACRC,GAAG,EAAE,EAAE;IACPC,IAAI,EAAE,EAAE;IACRC,GAAG,EAAE,EAAE;IACPC,KAAK,EAAE;EACT,CAAC,CAAC;EAEF,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEtD,MAAMgB,iBAAiB,GAAGA,CAACC,GAAG,EAAEC,KAAK,KAAK;IACxCX,UAAU,CAAEY,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAE,CAACF,GAAG,GAAGC;IAAM,CAAC,CAAC,CAAC;IACjDH,gBAAgB,CAAEI,IAAI,KAAM;MAAE,GAAGA,IAAI;MAAE,CAACF,GAAG,GAAG;IAAM,CAAC,CAAC,CAAC,CAAC,CAAC;EAC3D,CAAC;EAED,MAAMG,aAAa,GAAGA,CAAA,KAAM;IAC1B,MAAMC,gBAAgB,GAAG,CAAC,CAAC;;IAE3B;IACAC,MAAM,CAACC,OAAO,CAACjB,OAAO,CAAC,CAACkB,OAAO,CAAC,CAAC,CAACP,GAAG,EAAEC,KAAK,CAAC,KAAK;MAChD,IAAIO,KAAK,CAACP,KAAK,CAAC,IAAIA,KAAK,CAACQ,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;QACvCL,gBAAgB,CAACJ,GAAG,CAAC,GAAG,IAAI;MAC9B;IACF,CAAC,CAAC;IAEF,IAAIK,MAAM,CAACK,IAAI,CAACN,gBAAgB,CAAC,CAACO,MAAM,GAAG,CAAC,EAAE;MAC5Cb,gBAAgB,CAACM,gBAAgB,CAAC;MAClCQ,KAAK,CAAC,2CAA2C,CAAC;MAClD;IACF;IAEAA,KAAK,CAAC,oBAAoBP,MAAM,CAACQ,MAAM,CAACxB,OAAO,CAAC,CAACyB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC;EAChE,CAAC;EAED,oBACE7B,OAAA;IAAK8B,SAAS,EAAC,YAAY;IAAAC,QAAA,eACzB/B,OAAA;MAAQ8B,SAAS,EAAC,mBAAmB;MAAAC,QAAA,gBACnC/B,OAAA;QAAKgC,GAAG,EAAEnC,aAAc;QAACiC,SAAS,EAAC,iBAAiB;QAACG,GAAG,EAAC;MAAe;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAE1ElC,UAAU,CAACmC,GAAG,CAAEC,QAAQ,iBACvBvC,OAAA;QAAK8B,SAAS,EAAC,eAAe;QAAAC,QAAA,eAC5B/B,OAAA;UACEwC,IAAI,EAAC,QAAQ,CAAC;UAAA;UACdC,WAAW,EAAE,GAAGF,QAAQ,aAAc;UACtCvB,KAAK,EAAEZ,OAAO,CAACmC,QAAQ,CAAE;UACzBG,QAAQ,EAAGC,CAAC,IAAK7B,iBAAiB,CAACyB,QAAQ,EAAEI,CAAC,CAACC,MAAM,CAAC5B,KAAK,CAAE;UAC7Dc,SAAS,EAAElB,aAAa,CAAC2B,QAAQ,CAAC,GAAG,SAAS,GAAG;QAAG;UAAAL,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrD;MAAC,GAPgCE,QAAQ;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAQvC,CACN,CAAC,eAEFrC,OAAA;QAAQ8B,SAAS,EAAC,WAAW;QAACe,OAAO,EAAE3B,aAAc;QAAAa,QAAA,EAAC;MAEtD;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEV;AAACnC,EAAA,CA7DQD,UAAU;AAAA6C,EAAA,GAAV7C,UAAU;AA+DnB,eAAeA,UAAU;AAAC,IAAA6C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}