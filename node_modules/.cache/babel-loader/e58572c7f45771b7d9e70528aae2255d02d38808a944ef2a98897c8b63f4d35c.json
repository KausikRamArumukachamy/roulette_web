{"ast":null,"code":"import _objectSpread from\"D:/roulette_app/roulette_web/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState}from'react';import'./stats.css';import rouletteImage from'../roulette_img.png';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Stats(){const categories=['Red','Black','Odd','Even','High','Low'];const[numbers,setNumbers]=useState({Red:'',Black:'',Odd:'',Even:'',High:'',Low:''});const[total_count,setTotal_count]=useState('');const[invalidFields,setInvalidFields]=useState({});const[responseMessage,setResponseMessage]=useState('');const handleInputChange=(key,value)=>{setNumbers(prev=>_objectSpread(_objectSpread({},prev),{},{[key]:value}));setInvalidFields(prev=>_objectSpread(_objectSpread({},prev),{},{[key]:false}));// Reset invalid state\n};// Function to validate the input values\nconst validateField=(key,value)=>{const numValue=parseFloat(value);return!isNaN(numValue)&&value.trim()!=='';};const handleTotalCountChange=value=>{setTotal_count(value);setInvalidFields(prevFields=>_objectSpread(_objectSpread({},prevFields),{},{'Total Count':!validateField('Total Count',value)// Validate Total Count\n}));};const handleOkClick=async()=>{const newInvalidFields={};// Validate each field\nObject.entries(numbers).forEach(_ref=>{let[key,value]=_ref;const numValue=parseFloat(value);if(isNaN(numValue)||value.trim()===''){newInvalidFields[key]=true;}});const totalCountValue=parseInt(total_count,10);// Make sure total_count is an integer\nif(isNaN(totalCountValue)||total_count.trim()===''){newInvalidFields['Total Count']=true;}if(Object.keys(newInvalidFields).length>0){setInvalidFields(newInvalidFields);setResponseMessage('Please enter valid numbers in all fields.');setTimeout(()=>{setResponseMessage('');},3000);return;}// Prepare the data with correct types\nconst statsData={red_statistic:parseFloat(numbers.Red),black_statistic:parseFloat(numbers.Black),odd_statistic:parseFloat(numbers.Odd),even_statistic:parseFloat(numbers.Even),high_statistic:parseFloat(numbers.High),low_statistic:parseFloat(numbers.Low),total_count:totalCountValue};try{// Make the API call to send the data to the backend\nconst response=await fetch('http://localhost:8000/update-stats',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(statsData)});if(!response.ok){throw new Error('Failed to send stats');}// Update response message after success\nsetResponseMessage('Stats saved successfully!');// Reset all fields after successful submission\nsetNumbers({Red:'',Black:'',Odd:'',Even:'',High:'',Low:''});setTotal_count('');setInvalidFields({});//Make sure the response message disappears after 10 seconds\nsetTimeout(()=>{setResponseMessage('');},10000);}catch(error){console.error(error);setResponseMessage('An error occurred while sending stats.');}};const handleKeyDown=e=>{if(e.key==='Enter'){handleOkClick();// Trigger OK button click when Enter is pressed\n}};return/*#__PURE__*/_jsxs(\"div\",{className:\"Stats\",children:[/*#__PURE__*/_jsx(\"header\",{className:\"Stats-header\",children:/*#__PURE__*/_jsx(\"img\",{src:rouletteImage,className:\"Stats-logo\",alt:\"roulette logo\"})}),/*#__PURE__*/_jsxs(\"div\",{className:\"inputs-container\",children:[categories.map(category=>/*#__PURE__*/_jsxs(\"div\",{className:\"number-inputs\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"input-label\",children:\"\".concat(category,\" %\")}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",placeholder:\"\".concat(category,\" %\"),value:numbers[category],onChange:e=>handleInputChange(category,e.target.value),className:invalidFields[category]?'invalid':'',onKeyDown:handleKeyDown// Add the keydown event listener\n})]},category)),/*#__PURE__*/_jsxs(\"div\",{className:\"number-inputs\",children:[/*#__PURE__*/_jsx(\"label\",{className:\"input-label\",children:\"Total Count\"}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",placeholder:\"Total Count\",value:total_count,onChange:e=>handleTotalCountChange(e.target.value),className:invalidFields['Total Count']?'invalid':'',onKeyDown:handleKeyDown// Add the keydown event listener here as well\n})]}),/*#__PURE__*/_jsx(\"button\",{className:\"ok-button\",onClick:handleOkClick,children:\"OK\"}),responseMessage&&/*#__PURE__*/_jsx(\"p\",{className:\"response-message\",children:responseMessage}),\" \"]})]});}export default Stats;","map":{"version":3,"names":["React","useState","rouletteImage","jsx","_jsx","jsxs","_jsxs","Stats","categories","numbers","setNumbers","Red","Black","Odd","Even","High","Low","total_count","setTotal_count","invalidFields","setInvalidFields","responseMessage","setResponseMessage","handleInputChange","key","value","prev","_objectSpread","validateField","numValue","parseFloat","isNaN","trim","handleTotalCountChange","prevFields","handleOkClick","newInvalidFields","Object","entries","forEach","_ref","totalCountValue","parseInt","keys","length","setTimeout","statsData","red_statistic","black_statistic","odd_statistic","even_statistic","high_statistic","low_statistic","response","fetch","method","headers","body","JSON","stringify","ok","Error","error","console","handleKeyDown","e","className","children","src","alt","map","category","concat","type","placeholder","onChange","target","onKeyDown","onClick"],"sources":["D:/roulette_app/roulette_web/src/tabs/stats.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './stats.css';\r\nimport rouletteImage from '../roulette_img.png';\r\n\r\nfunction Stats() {\r\n  const categories = ['Red', 'Black', 'Odd', 'Even', 'High', 'Low'];\r\n\r\n  const [numbers, setNumbers] = useState({\r\n    Red: '',\r\n    Black: '',\r\n    Odd: '',\r\n    Even: '',\r\n    High: '',\r\n    Low: '',\r\n  });\r\n\r\n  const [total_count, setTotal_count] = useState('');\r\n  const [invalidFields, setInvalidFields] = useState({});\r\n  const [responseMessage, setResponseMessage] = useState(''); \r\n\r\n  const handleInputChange = (key, value) => {\r\n    setNumbers((prev) => ({ ...prev, [key]: value }));\r\n    setInvalidFields((prev) => ({ ...prev, [key]: false })); // Reset invalid state\r\n  };\r\n\r\n  // Function to validate the input values\r\n  const validateField = (key, value) => {\r\n    const numValue = parseFloat(value);\r\n    return !isNaN(numValue) && value.trim() !== '';\r\n  };\r\n\r\n  const handleTotalCountChange = (value) => {\r\n    setTotal_count(value);\r\n    setInvalidFields((prevFields) => ({\r\n      ...prevFields,\r\n      'Total Count': !validateField('Total Count', value), // Validate Total Count\r\n    }));\r\n  };\r\n\r\n  const handleOkClick = async () => {\r\n    const newInvalidFields = {};\r\n\r\n    // Validate each field\r\n    Object.entries(numbers).forEach(([key, value]) => {\r\n      const numValue = parseFloat(value);\r\n      if (isNaN(numValue) || value.trim() === '') {\r\n        newInvalidFields[key] = true;\r\n      }\r\n    });\r\n\r\n    const totalCountValue = parseInt(total_count, 10);  // Make sure total_count is an integer\r\n    if (isNaN(totalCountValue) || total_count.trim() === '') {\r\n      newInvalidFields['Total Count'] = true;\r\n    }\r\n\r\n    if (Object.keys(newInvalidFields).length > 0) {\r\n      setInvalidFields(newInvalidFields);\r\n      setResponseMessage('Please enter valid numbers in all fields.');\r\n      setTimeout(() => {\r\n        setResponseMessage('');\r\n      }, 3000);\r\n      return;\r\n    }\r\n\r\n    // Prepare the data with correct types\r\n    const statsData = { \r\n      red_statistic: parseFloat(numbers.Red),\r\n      black_statistic: parseFloat(numbers.Black),\r\n      odd_statistic: parseFloat(numbers.Odd),\r\n      even_statistic: parseFloat(numbers.Even),\r\n      high_statistic: parseFloat(numbers.High),\r\n      low_statistic: parseFloat(numbers.Low),\r\n      total_count: totalCountValue\r\n    };\r\n\r\n    try {\r\n      // Make the API call to send the data to the backend\r\n      const response = await fetch('http://localhost:8000/update-stats', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(statsData),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to send stats');\r\n      }\r\n\r\n      // Update response message after success\r\n      setResponseMessage('Stats saved successfully!');\r\n      // Reset all fields after successful submission\r\n      setNumbers({\r\n        Red: '',\r\n        Black: '',\r\n        Odd: '',\r\n        Even: '',\r\n        High: '',\r\n        Low: '',\r\n      });\r\n      setTotal_count('');\r\n      setInvalidFields({});\r\n      //Make sure the response message disappears after 10 seconds\r\n      setTimeout(() => {\r\n        setResponseMessage('');\r\n      }, 10000); \r\n    } catch (error) {\r\n      console.error(error);\r\n      setResponseMessage('An error occurred while sending stats.');\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    if (e.key === 'Enter') {\r\n      handleOkClick();  // Trigger OK button click when Enter is pressed\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Stats\">\r\n      <header className=\"Stats-header\">\r\n        <img src={rouletteImage} className=\"Stats-logo\" alt=\"roulette logo\" />\r\n      </header>\r\n\r\n      <div className=\"inputs-container\">\r\n        {categories.map((category) => (\r\n          <div className=\"number-inputs\" key={category}>\r\n            <label className=\"input-label\">{`${category} %`}</label>\r\n            <input\r\n              type=\"number\"\r\n              placeholder={`${category} %`}\r\n              value={numbers[category]}\r\n              onChange={(e) => handleInputChange(category, e.target.value)}\r\n              className={invalidFields[category] ? 'invalid' : ''}\r\n              onKeyDown={handleKeyDown}  // Add the keydown event listener\r\n            />\r\n          </div>\r\n        ))}\r\n        <div className=\"number-inputs\">\r\n          <label className=\"input-label\">{`Total Count`}</label>\r\n          <input\r\n            type=\"number\"\r\n            placeholder=\"Total Count\"\r\n            value={total_count}\r\n            onChange={(e) => handleTotalCountChange(e.target.value)}\r\n            className={invalidFields['Total Count'] ? 'invalid' : ''}\r\n            onKeyDown={handleKeyDown}  // Add the keydown event listener here as well\r\n          />\r\n        </div>\r\n\r\n        <button className=\"ok-button\" onClick={handleOkClick}>\r\n          OK\r\n        </button>\r\n\r\n        {responseMessage && <p className=\"response-message\">{responseMessage}</p>} {/* Show response message */}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Stats;\r\n\r\n"],"mappings":"iHAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,KAAQ,OAAO,CACvC,MAAO,aAAa,CACpB,MAAO,CAAAC,aAAa,KAAM,qBAAqB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEhD,QAAS,CAAAC,KAAKA,CAAA,CAAG,CACf,KAAM,CAAAC,UAAU,CAAG,CAAC,KAAK,CAAE,OAAO,CAAE,KAAK,CAAE,MAAM,CAAE,MAAM,CAAE,KAAK,CAAC,CAEjE,KAAM,CAACC,OAAO,CAAEC,UAAU,CAAC,CAAGT,QAAQ,CAAC,CACrCU,GAAG,CAAE,EAAE,CACPC,KAAK,CAAE,EAAE,CACTC,GAAG,CAAE,EAAE,CACPC,IAAI,CAAE,EAAE,CACRC,IAAI,CAAE,EAAE,CACRC,GAAG,CAAE,EACP,CAAC,CAAC,CAEF,KAAM,CAACC,WAAW,CAAEC,cAAc,CAAC,CAAGjB,QAAQ,CAAC,EAAE,CAAC,CAClD,KAAM,CAACkB,aAAa,CAAEC,gBAAgB,CAAC,CAAGnB,QAAQ,CAAC,CAAC,CAAC,CAAC,CACtD,KAAM,CAACoB,eAAe,CAAEC,kBAAkB,CAAC,CAAGrB,QAAQ,CAAC,EAAE,CAAC,CAE1D,KAAM,CAAAsB,iBAAiB,CAAGA,CAACC,GAAG,CAAEC,KAAK,GAAK,CACxCf,UAAU,CAAEgB,IAAI,EAAAC,aAAA,CAAAA,aAAA,IAAWD,IAAI,MAAE,CAACF,GAAG,EAAGC,KAAK,EAAG,CAAC,CACjDL,gBAAgB,CAAEM,IAAI,EAAAC,aAAA,CAAAA,aAAA,IAAWD,IAAI,MAAE,CAACF,GAAG,EAAG,KAAK,EAAG,CAAC,CAAE;AAC3D,CAAC,CAED;AACA,KAAM,CAAAI,aAAa,CAAGA,CAACJ,GAAG,CAAEC,KAAK,GAAK,CACpC,KAAM,CAAAI,QAAQ,CAAGC,UAAU,CAACL,KAAK,CAAC,CAClC,MAAO,CAACM,KAAK,CAACF,QAAQ,CAAC,EAAIJ,KAAK,CAACO,IAAI,CAAC,CAAC,GAAK,EAAE,CAChD,CAAC,CAED,KAAM,CAAAC,sBAAsB,CAAIR,KAAK,EAAK,CACxCP,cAAc,CAACO,KAAK,CAAC,CACrBL,gBAAgB,CAAEc,UAAU,EAAAP,aAAA,CAAAA,aAAA,IACvBO,UAAU,MACb,aAAa,CAAE,CAACN,aAAa,CAAC,aAAa,CAAEH,KAAK,CAAG;AAAA,EACrD,CAAC,CACL,CAAC,CAED,KAAM,CAAAU,aAAa,CAAG,KAAAA,CAAA,GAAY,CAChC,KAAM,CAAAC,gBAAgB,CAAG,CAAC,CAAC,CAE3B;AACAC,MAAM,CAACC,OAAO,CAAC7B,OAAO,CAAC,CAAC8B,OAAO,CAACC,IAAA,EAAkB,IAAjB,CAAChB,GAAG,CAAEC,KAAK,CAAC,CAAAe,IAAA,CAC3C,KAAM,CAAAX,QAAQ,CAAGC,UAAU,CAACL,KAAK,CAAC,CAClC,GAAIM,KAAK,CAACF,QAAQ,CAAC,EAAIJ,KAAK,CAACO,IAAI,CAAC,CAAC,GAAK,EAAE,CAAE,CAC1CI,gBAAgB,CAACZ,GAAG,CAAC,CAAG,IAAI,CAC9B,CACF,CAAC,CAAC,CAEF,KAAM,CAAAiB,eAAe,CAAGC,QAAQ,CAACzB,WAAW,CAAE,EAAE,CAAC,CAAG;AACpD,GAAIc,KAAK,CAACU,eAAe,CAAC,EAAIxB,WAAW,CAACe,IAAI,CAAC,CAAC,GAAK,EAAE,CAAE,CACvDI,gBAAgB,CAAC,aAAa,CAAC,CAAG,IAAI,CACxC,CAEA,GAAIC,MAAM,CAACM,IAAI,CAACP,gBAAgB,CAAC,CAACQ,MAAM,CAAG,CAAC,CAAE,CAC5CxB,gBAAgB,CAACgB,gBAAgB,CAAC,CAClCd,kBAAkB,CAAC,2CAA2C,CAAC,CAC/DuB,UAAU,CAAC,IAAM,CACfvB,kBAAkB,CAAC,EAAE,CAAC,CACxB,CAAC,CAAE,IAAI,CAAC,CACR,OACF,CAEA;AACA,KAAM,CAAAwB,SAAS,CAAG,CAChBC,aAAa,CAAEjB,UAAU,CAACrB,OAAO,CAACE,GAAG,CAAC,CACtCqC,eAAe,CAAElB,UAAU,CAACrB,OAAO,CAACG,KAAK,CAAC,CAC1CqC,aAAa,CAAEnB,UAAU,CAACrB,OAAO,CAACI,GAAG,CAAC,CACtCqC,cAAc,CAAEpB,UAAU,CAACrB,OAAO,CAACK,IAAI,CAAC,CACxCqC,cAAc,CAAErB,UAAU,CAACrB,OAAO,CAACM,IAAI,CAAC,CACxCqC,aAAa,CAAEtB,UAAU,CAACrB,OAAO,CAACO,GAAG,CAAC,CACtCC,WAAW,CAAEwB,eACf,CAAC,CAED,GAAI,CACF;AACA,KAAM,CAAAY,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAAC,oCAAoC,CAAE,CACjEC,MAAM,CAAE,MAAM,CACdC,OAAO,CAAE,CACP,cAAc,CAAE,kBAClB,CAAC,CACDC,IAAI,CAAEC,IAAI,CAACC,SAAS,CAACb,SAAS,CAChC,CAAC,CAAC,CAEF,GAAI,CAACO,QAAQ,CAACO,EAAE,CAAE,CAChB,KAAM,IAAI,CAAAC,KAAK,CAAC,sBAAsB,CAAC,CACzC,CAEA;AACAvC,kBAAkB,CAAC,2BAA2B,CAAC,CAC/C;AACAZ,UAAU,CAAC,CACTC,GAAG,CAAE,EAAE,CACPC,KAAK,CAAE,EAAE,CACTC,GAAG,CAAE,EAAE,CACPC,IAAI,CAAE,EAAE,CACRC,IAAI,CAAE,EAAE,CACRC,GAAG,CAAE,EACP,CAAC,CAAC,CACFE,cAAc,CAAC,EAAE,CAAC,CAClBE,gBAAgB,CAAC,CAAC,CAAC,CAAC,CACpB;AACAyB,UAAU,CAAC,IAAM,CACfvB,kBAAkB,CAAC,EAAE,CAAC,CACxB,CAAC,CAAE,KAAK,CAAC,CACX,CAAE,MAAOwC,KAAK,CAAE,CACdC,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC,CACpBxC,kBAAkB,CAAC,wCAAwC,CAAC,CAC9D,CACF,CAAC,CAED,KAAM,CAAA0C,aAAa,CAAIC,CAAC,EAAK,CAC3B,GAAIA,CAAC,CAACzC,GAAG,GAAK,OAAO,CAAE,CACrBW,aAAa,CAAC,CAAC,CAAG;AACpB,CACF,CAAC,CAED,mBACE7B,KAAA,QAAK4D,SAAS,CAAC,OAAO,CAAAC,QAAA,eACpB/D,IAAA,WAAQ8D,SAAS,CAAC,cAAc,CAAAC,QAAA,cAC9B/D,IAAA,QAAKgE,GAAG,CAAElE,aAAc,CAACgE,SAAS,CAAC,YAAY,CAACG,GAAG,CAAC,eAAe,CAAE,CAAC,CAChE,CAAC,cAET/D,KAAA,QAAK4D,SAAS,CAAC,kBAAkB,CAAAC,QAAA,EAC9B3D,UAAU,CAAC8D,GAAG,CAAEC,QAAQ,eACvBjE,KAAA,QAAK4D,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC5B/D,IAAA,UAAO8D,SAAS,CAAC,aAAa,CAAAC,QAAA,IAAAK,MAAA,CAAKD,QAAQ,OAAY,CAAC,cACxDnE,IAAA,UACEqE,IAAI,CAAC,QAAQ,CACbC,WAAW,IAAAF,MAAA,CAAKD,QAAQ,MAAK,CAC7B9C,KAAK,CAAEhB,OAAO,CAAC8D,QAAQ,CAAE,CACzBI,QAAQ,CAAGV,CAAC,EAAK1C,iBAAiB,CAACgD,QAAQ,CAAEN,CAAC,CAACW,MAAM,CAACnD,KAAK,CAAE,CAC7DyC,SAAS,CAAE/C,aAAa,CAACoD,QAAQ,CAAC,CAAG,SAAS,CAAG,EAAG,CACpDM,SAAS,CAAEb,aAAgB;AAAA,CAC5B,CAAC,GATgCO,QAU/B,CACN,CAAC,cACFjE,KAAA,QAAK4D,SAAS,CAAC,eAAe,CAAAC,QAAA,eAC5B/D,IAAA,UAAO8D,SAAS,CAAC,aAAa,CAAAC,QAAA,eAAuB,CAAC,cACtD/D,IAAA,UACEqE,IAAI,CAAC,QAAQ,CACbC,WAAW,CAAC,aAAa,CACzBjD,KAAK,CAAER,WAAY,CACnB0D,QAAQ,CAAGV,CAAC,EAAKhC,sBAAsB,CAACgC,CAAC,CAACW,MAAM,CAACnD,KAAK,CAAE,CACxDyC,SAAS,CAAE/C,aAAa,CAAC,aAAa,CAAC,CAAG,SAAS,CAAG,EAAG,CACzD0D,SAAS,CAAEb,aAAgB;AAAA,CAC5B,CAAC,EACC,CAAC,cAEN5D,IAAA,WAAQ8D,SAAS,CAAC,WAAW,CAACY,OAAO,CAAE3C,aAAc,CAAAgC,QAAA,CAAC,IAEtD,CAAQ,CAAC,CAER9C,eAAe,eAAIjB,IAAA,MAAG8D,SAAS,CAAC,kBAAkB,CAAAC,QAAA,CAAE9C,eAAe,CAAI,CAAC,CAAC,GAAC,EACxE,CAAC,EACH,CAAC,CAEV,CAEA,cAAe,CAAAd,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}