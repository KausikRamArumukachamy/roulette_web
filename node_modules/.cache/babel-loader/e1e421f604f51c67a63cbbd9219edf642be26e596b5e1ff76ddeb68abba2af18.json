{"ast":null,"code":"// import React, { useState, useEffect } from 'react';\n// import './graphs.css';\n\n// function Graph() {\n//   const [lastDraw, setLastDraw] = useState('');\n//   const [responseMessage, setResponseMessage] = useState('');\n//   const [lastRow, setLastRow] = useState(null); // State to store the last row data\n\n//   // Function to fetch the last row from the backend\n//   const fetchLastRow = async () => {\n//     try {\n//       const response = await fetch('http://localhost:8000/get-last-row');\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch last row');\n//       }\n\n//       const data = await response.json();\n//       setLastRow(data.last_row); // Update state with the last row data\n//     } catch (error) {\n//       console.error('Error fetching last row:', error);\n//       alert('An error occurred while fetching the last row.');\n//     }\n//   };\n\n//   // Fetch the last row when the component mounts\n//   useEffect(() => {\n//     fetchLastRow();\n//   }, []);\n\n//   const handleAddLastDraw = async () => {\n//     if (isNaN(lastDraw) || lastDraw.trim() === '') {\n//       alert('Please enter a valid number for the last draw.');\n//       return;\n//     }\n\n//     try {\n//       const payload = { number: parseInt(lastDraw, 10) };\n//       console.log('Payload sent to backend:', payload);\n\n//       const response = await fetch('http://localhost:8000/add-last-draw', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(payload),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Failed to send last draw to the backend.');\n//       }\n\n//       const data = await response.json();\n//       setResponseMessage(data.message || 'Last draw added successfully!');\n//       fetchLastRow();\n//     } catch (error) {\n//       console.error('Error sending last draw:', error);\n//       alert('An error occurred while sending the last draw.');\n//     }\n//   };\n\n//   return (\n//     <div className=\"graph\">\n//       <div className=\"last-draw-container\">\n//         <label htmlFor=\"last-draw\" className=\"last-draw-label\">\n//           Last Draw:\n//         </label>\n//         <input\n//           type=\"number\"\n//           id=\"last-draw\"\n//           placeholder=\"Enter last draw\"\n//           className=\"last-draw-input\"\n//           value={lastDraw}\n//           onChange={(e) => setLastDraw(e.target.value)}\n//         />\n//         <div className=\"last-draw-buttons\">\n//           <button className=\"last-draw-button\" onClick={handleAddLastDraw}>\n//             Add Last Draw\n//           </button>\n//           <button\n//             className=\"last-draw-button\"\n//             onClick={() => setLastDraw('')}\n//           >\n//             Remove Last Draw\n//           </button>\n//         </div>\n//       </div>\n\n//       {responseMessage && <p className=\"response-message\">{responseMessage}</p>}\n\n//       <div className=\"graph-container\">\n//         <div className=\"graph-item\">\n//           <h4>Dataframe</h4>\n//           {lastRow ? (\n//             <table className=\"dataframe-table\">\n//               <thead>\n//                 <tr>\n//                   <th>Number</th>\n//                   <th>Colour</th>\n//                   <th>Odd/Even</th>\n//                   <th>High/Low</th>\n//                   <th>Red Statistic</th>\n//                   <th>Black Statistic</th>\n//                   <th>Odd Statistic</th>\n//                   <th>Even Statistic</th>\n//                   <th>High Statistic</th>\n//                   <th>Low Statistic</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 <tr>\n//                   <td>{lastRow.number}</td>\n//                   <td>{lastRow.colour}</td>\n//                   <td>{lastRow.odd_even}</td>\n//                   <td>{lastRow.high_low}</td>\n//                   <td>{lastRow.red_statistic}</td>\n//                   <td>{lastRow.black_statistic}</td>\n//                   <td>{lastRow.odd_statistic}</td>\n//                   <td>{lastRow.even_statistic}</td>\n//                   <td>{lastRow.high_statistic}</td>\n//                   <td>{lastRow.low_statistic}</td>\n//                 </tr>\n//               </tbody>\n//             </table>\n//           ) : (\n//             <p>Loading last row...</p>\n//           )}\n//         </div>\n\n//         <div className=\"graph-item\">\n//           <h4>Red-Black Graph</h4>\n//           <div className=\"graph-placeholder\">[Graph Placeholder]</div>\n//         </div>\n\n//         <div className=\"graph-item\">\n//           <h4>Odd-Even Graph</h4>\n//           <div className=\"graph-placeholder\">[Graph Placeholder]</div>\n//         </div>\n\n//         <div className=\"graph-item\">\n//           <h4>Low-High Graph</h4>\n//           <div className=\"graph-placeholder\">[Graph Placeholder]</div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Graph;","map":{"version":3,"names":[],"sources":["D:/roulette_app/roulette_fe/src/tabs/graphs.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import './graphs.css';\r\n\r\n// function Graph() {\r\n//   const [lastDraw, setLastDraw] = useState('');\r\n//   const [responseMessage, setResponseMessage] = useState('');\r\n//   const [lastRow, setLastRow] = useState(null); // State to store the last row data\r\n\r\n//   // Function to fetch the last row from the backend\r\n//   const fetchLastRow = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:8000/get-last-row');\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to fetch last row');\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       setLastRow(data.last_row); // Update state with the last row data\r\n//     } catch (error) {\r\n//       console.error('Error fetching last row:', error);\r\n//       alert('An error occurred while fetching the last row.');\r\n//     }\r\n//   };\r\n\r\n//   // Fetch the last row when the component mounts\r\n//   useEffect(() => {\r\n//     fetchLastRow();\r\n//   }, []);\r\n\r\n//   const handleAddLastDraw = async () => {\r\n//     if (isNaN(lastDraw) || lastDraw.trim() === '') {\r\n//       alert('Please enter a valid number for the last draw.');\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const payload = { number: parseInt(lastDraw, 10) };\r\n//       console.log('Payload sent to backend:', payload);\r\n\r\n//       const response = await fetch('http://localhost:8000/add-last-draw', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(payload),\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to send last draw to the backend.');\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       setResponseMessage(data.message || 'Last draw added successfully!');\r\n//       fetchLastRow();\r\n//     } catch (error) {\r\n//       console.error('Error sending last draw:', error);\r\n//       alert('An error occurred while sending the last draw.');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"graph\">\r\n//       <div className=\"last-draw-container\">\r\n//         <label htmlFor=\"last-draw\" className=\"last-draw-label\">\r\n//           Last Draw:\r\n//         </label>\r\n//         <input\r\n//           type=\"number\"\r\n//           id=\"last-draw\"\r\n//           placeholder=\"Enter last draw\"\r\n//           className=\"last-draw-input\"\r\n//           value={lastDraw}\r\n//           onChange={(e) => setLastDraw(e.target.value)}\r\n//         />\r\n//         <div className=\"last-draw-buttons\">\r\n//           <button className=\"last-draw-button\" onClick={handleAddLastDraw}>\r\n//             Add Last Draw\r\n//           </button>\r\n//           <button\r\n//             className=\"last-draw-button\"\r\n//             onClick={() => setLastDraw('')}\r\n//           >\r\n//             Remove Last Draw\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {responseMessage && <p className=\"response-message\">{responseMessage}</p>}\r\n\r\n//       <div className=\"graph-container\">\r\n//         <div className=\"graph-item\">\r\n//           <h4>Dataframe</h4>\r\n//           {lastRow ? (\r\n//             <table className=\"dataframe-table\">\r\n//               <thead>\r\n//                 <tr>\r\n//                   <th>Number</th>\r\n//                   <th>Colour</th>\r\n//                   <th>Odd/Even</th>\r\n//                   <th>High/Low</th>\r\n//                   <th>Red Statistic</th>\r\n//                   <th>Black Statistic</th>\r\n//                   <th>Odd Statistic</th>\r\n//                   <th>Even Statistic</th>\r\n//                   <th>High Statistic</th>\r\n//                   <th>Low Statistic</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 <tr>\r\n//                   <td>{lastRow.number}</td>\r\n//                   <td>{lastRow.colour}</td>\r\n//                   <td>{lastRow.odd_even}</td>\r\n//                   <td>{lastRow.high_low}</td>\r\n//                   <td>{lastRow.red_statistic}</td>\r\n//                   <td>{lastRow.black_statistic}</td>\r\n//                   <td>{lastRow.odd_statistic}</td>\r\n//                   <td>{lastRow.even_statistic}</td>\r\n//                   <td>{lastRow.high_statistic}</td>\r\n//                   <td>{lastRow.low_statistic}</td>\r\n//                 </tr>\r\n//               </tbody>\r\n//             </table>\r\n//           ) : (\r\n//             <p>Loading last row...</p>\r\n//           )}\r\n//         </div>\r\n\r\n//         <div className=\"graph-item\">\r\n//           <h4>Red-Black Graph</h4>\r\n//           <div className=\"graph-placeholder\">[Graph Placeholder]</div>\r\n//         </div>\r\n\r\n//         <div className=\"graph-item\">\r\n//           <h4>Odd-Even Graph</h4>\r\n//           <div className=\"graph-placeholder\">[Graph Placeholder]</div>\r\n//         </div>\r\n\r\n//         <div className=\"graph-item\">\r\n//           <h4>Low-High Graph</h4>\r\n//           <div className=\"graph-placeholder\">[Graph Placeholder]</div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Graph;\r\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}