{"ast":null,"code":"var _jsxFileName = \"D:\\\\roulette_app\\\\roulette_fe\\\\src\\\\tabs\\\\graphs.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import './graphs.css';\n\n// function Graph() {\n//   const [lastDraw, setLastDraw] = useState('');\n//   const [responseMessage, setResponseMessage] = useState('');\n//   const [lastRow, setLastRow] = useState(null); // State to store the last row data\n\n//   // Function to fetch the last row from the backend\n//   const fetchLastRow = async () => {\n//     try {\n//       const response = await fetch('http://localhost:8000/get-last-row');\n//       if (!response.ok) {\n//         throw new Error('Failed to fetch last row');\n//       }\n\n//       const data = await response.json();\n//       setLastRow(data.last_row); // Update state with the last row data\n//     } catch (error) {\n//       console.error('Error fetching last row:', error);\n//       alert('An error occurred while fetching the last row.');\n//     }\n//   };\n\n//   // Fetch the last row when the component mounts\n//   useEffect(() => {\n//     fetchLastRow();\n//   }, []);\n\n//   const handleAddLastDraw = async () => {\n//     if (isNaN(lastDraw) || lastDraw.trim() === '') {\n//       alert('Please enter a valid number for the last draw.');\n//       return;\n//     }\n\n//     try {\n//       const payload = { number: parseInt(lastDraw, 10) };\n//       console.log('Payload sent to backend:', payload);\n\n//       const response = await fetch('http://localhost:8000/add-last-draw', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify(payload),\n//       });\n\n//       if (!response.ok) {\n//         throw new Error('Failed to send last draw to the backend.');\n//       }\n\n//       const data = await response.json();\n//       setResponseMessage(data.message || 'Last draw added successfully!');\n//       fetchLastRow();\n//     } catch (error) {\n//       console.error('Error sending last draw:', error);\n//       alert('An error occurred while sending the last draw.');\n//     }\n//   };\n\n//   return (\n//     <div className=\"graph\">\n//       <div className=\"last-draw-container\">\n//         <label htmlFor=\"last-draw\" className=\"last-draw-label\">\n//           Last Draw:\n//         </label>\n//         <input\n//           type=\"number\"\n//           id=\"last-draw\"\n//           placeholder=\"Enter last draw\"\n//           className=\"last-draw-input\"\n//           value={lastDraw}\n//           onChange={(e) => setLastDraw(e.target.value)}\n//         />\n//         <div className=\"last-draw-buttons\">\n//           <button className=\"last-draw-button\" onClick={handleAddLastDraw}>\n//             Add Last Draw\n//           </button>\n//           <button\n//             className=\"last-draw-button\"\n//             onClick={() => setLastDraw('')}\n//           >\n//             Remove Last Draw\n//           </button>\n//         </div>\n//       </div>\n\n//       {responseMessage && <p className=\"response-message\">{responseMessage}</p>}\n\n//       <div className=\"graph-container\">\n//         <div className=\"graph-item\">\n//           <h4>Dataframe</h4>\n//           {lastRow ? (\n//             <table className=\"dataframe-table\">\n//               <thead>\n//                 <tr>\n//                   <th>Number</th>\n//                   <th>Colour</th>\n//                   <th>Odd/Even</th>\n//                   <th>High/Low</th>\n//                   <th>Red Statistic</th>\n//                   <th>Black Statistic</th>\n//                   <th>Odd Statistic</th>\n//                   <th>Even Statistic</th>\n//                   <th>High Statistic</th>\n//                   <th>Low Statistic</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 <tr>\n//                   <td>{lastRow.number}</td>\n//                   <td>{lastRow.colour}</td>\n//                   <td>{lastRow.odd_even}</td>\n//                   <td>{lastRow.high_low}</td>\n//                   <td>{lastRow.red_statistic}</td>\n//                   <td>{lastRow.black_statistic}</td>\n//                   <td>{lastRow.odd_statistic}</td>\n//                   <td>{lastRow.even_statistic}</td>\n//                   <td>{lastRow.high_statistic}</td>\n//                   <td>{lastRow.low_statistic}</td>\n//                 </tr>\n//               </tbody>\n//             </table>\n//           ) : (\n//             <p>Loading last row...</p>\n//           )}\n//         </div>\n\n//         <div className=\"graph-item\">\n//           <h4>Red-Black Graph</h4>\n//           <div className=\"graph-placeholder\">[Graph Placeholder]</div>\n//         </div>\n\n//         <div className=\"graph-item\">\n//           <h4>Odd-Even Graph</h4>\n//           <div className=\"graph-placeholder\">[Graph Placeholder]</div>\n//         </div>\n\n//         <div className=\"graph-item\">\n//           <h4>Low-High Graph</h4>\n//           <div className=\"graph-placeholder\">[Graph Placeholder]</div>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// export default Graph;\n\nimport React, { useState, useEffect } from 'react';\nimport './graphs.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Graph() {\n  _s();\n  const [lastDraw, setLastDraw] = useState('');\n  const [responseMessage, setResponseMessage] = useState('');\n  const [lastRow, setLastRow] = useState(null); // State to store the last row data\n  const [loading, setLoading] = useState(true); // State to track loading status\n\n  // Function to fetch the last row from the backend\n  const fetchLastRow = async () => {\n    try {\n      setLoading(true); // Set loading state to true before fetching\n      const response = await fetch('http://localhost:8000/get-last-row');\n      if (!response.ok) {\n        throw new Error('Failed to fetch last row');\n      }\n      const data = await response.json();\n      setLastRow(data.last_row); // Update state with the last row data\n    } catch (error) {\n      console.error('Error fetching last row:', error);\n      alert('An error occurred while fetching the last row.');\n    } finally {\n      setLoading(false); // Set loading state to false after fetch completes\n    }\n  };\n\n  // Fetch the last row only after a new draw is added\n  const handleAddLastDraw = async () => {\n    if (isNaN(lastDraw) || lastDraw.trim() === '') {\n      alert('Please enter a valid number for the last draw.');\n      return;\n    }\n    try {\n      const payload = {\n        number: parseInt(lastDraw, 10)\n      };\n      console.log('Payload sent to backend:', payload);\n      const response = await fetch('http://localhost:8000/add-last-draw', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(payload)\n      });\n      if (!response.ok) {\n        throw new Error('Failed to send last draw to the backend.');\n      }\n      const data = await response.json();\n      setResponseMessage(data.message || 'Last draw added successfully!');\n\n      // Fetch the updated last row data after successfully sending the draw\n      fetchLastRow(); // Fetch last row only after the draw is added\n    } catch (error) {\n      console.error('Error sending last draw:', error);\n      alert('An error occurred while sending the last draw.');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"graph\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"last-draw-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"last-draw\",\n        className: \"last-draw-label\",\n        children: \"Last Draw:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        id: \"last-draw\",\n        placeholder: \"Enter last draw\",\n        className: \"last-draw-input\",\n        value: lastDraw,\n        onChange: e => setLastDraw(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"last-draw-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"last-draw-button\",\n          onClick: handleAddLastDraw,\n          children: \"Add Last Draw\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 227,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"last-draw-button\",\n          onClick: () => setLastDraw(''),\n          children: \"Remove Last Draw\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 230,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), responseMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"response-message\",\n      children: responseMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 27\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Dataframe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 243,\n          columnNumber: 11\n        }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Loading last row...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 13\n        }, this) // Show loading message when fetching\n        : lastRow ? /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"dataframe-table\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Number\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 250,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Colour\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 251,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Odd/Even\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 252,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"High/Low\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 253,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Red Statistic\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 254,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Black Statistic\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Odd Statistic\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 256,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Even Statistic\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 257,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"High Statistic\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 258,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Low Statistic\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 249,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: lastRow.number\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 264,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: lastRow.colour\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: lastRow.odd_even\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 266,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: lastRow.high_low\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 267,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: lastRow.red_statistic\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 268,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: lastRow.black_statistic\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: lastRow.odd_statistic\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: lastRow.even_statistic\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: lastRow.high_statistic\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: lastRow.low_statistic\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 273,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"No data available\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 13\n        }, this) // If no data, show a message\n        ]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Red-Black Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"graph-placeholder\",\n          children: \"[Graph Placeholder]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Odd-Even Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"graph-placeholder\",\n          children: \"[Graph Placeholder]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"graph-item\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: \"Low-High Graph\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 293,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"graph-placeholder\",\n          children: \"[Graph Placeholder]\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 213,\n    columnNumber: 5\n  }, this);\n}\n_s(Graph, \"CLWkmhCM1NbkQbEFdfsENW4zdDY=\");\n_c = Graph;\nexport default Graph;\nvar _c;\n$RefreshReg$(_c, \"Graph\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Graph","_s","lastDraw","setLastDraw","responseMessage","setResponseMessage","lastRow","setLastRow","loading","setLoading","fetchLastRow","response","fetch","ok","Error","data","json","last_row","error","console","alert","handleAddLastDraw","isNaN","trim","payload","number","parseInt","log","method","headers","body","JSON","stringify","message","className","children","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","placeholder","value","onChange","e","target","onClick","colour","odd_even","high_low","red_statistic","black_statistic","odd_statistic","even_statistic","high_statistic","low_statistic","_c","$RefreshReg$"],"sources":["D:/roulette_app/roulette_fe/src/tabs/graphs.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import './graphs.css';\r\n\r\n// function Graph() {\r\n//   const [lastDraw, setLastDraw] = useState('');\r\n//   const [responseMessage, setResponseMessage] = useState('');\r\n//   const [lastRow, setLastRow] = useState(null); // State to store the last row data\r\n\r\n//   // Function to fetch the last row from the backend\r\n//   const fetchLastRow = async () => {\r\n//     try {\r\n//       const response = await fetch('http://localhost:8000/get-last-row');\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to fetch last row');\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       setLastRow(data.last_row); // Update state with the last row data\r\n//     } catch (error) {\r\n//       console.error('Error fetching last row:', error);\r\n//       alert('An error occurred while fetching the last row.');\r\n//     }\r\n//   };\r\n\r\n//   // Fetch the last row when the component mounts\r\n//   useEffect(() => {\r\n//     fetchLastRow();\r\n//   }, []);\r\n\r\n//   const handleAddLastDraw = async () => {\r\n//     if (isNaN(lastDraw) || lastDraw.trim() === '') {\r\n//       alert('Please enter a valid number for the last draw.');\r\n//       return;\r\n//     }\r\n\r\n//     try {\r\n//       const payload = { number: parseInt(lastDraw, 10) };\r\n//       console.log('Payload sent to backend:', payload);\r\n\r\n//       const response = await fetch('http://localhost:8000/add-last-draw', {\r\n//         method: 'POST',\r\n//         headers: {\r\n//           'Content-Type': 'application/json',\r\n//         },\r\n//         body: JSON.stringify(payload),\r\n//       });\r\n\r\n//       if (!response.ok) {\r\n//         throw new Error('Failed to send last draw to the backend.');\r\n//       }\r\n\r\n//       const data = await response.json();\r\n//       setResponseMessage(data.message || 'Last draw added successfully!');\r\n//       fetchLastRow();\r\n//     } catch (error) {\r\n//       console.error('Error sending last draw:', error);\r\n//       alert('An error occurred while sending the last draw.');\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <div className=\"graph\">\r\n//       <div className=\"last-draw-container\">\r\n//         <label htmlFor=\"last-draw\" className=\"last-draw-label\">\r\n//           Last Draw:\r\n//         </label>\r\n//         <input\r\n//           type=\"number\"\r\n//           id=\"last-draw\"\r\n//           placeholder=\"Enter last draw\"\r\n//           className=\"last-draw-input\"\r\n//           value={lastDraw}\r\n//           onChange={(e) => setLastDraw(e.target.value)}\r\n//         />\r\n//         <div className=\"last-draw-buttons\">\r\n//           <button className=\"last-draw-button\" onClick={handleAddLastDraw}>\r\n//             Add Last Draw\r\n//           </button>\r\n//           <button\r\n//             className=\"last-draw-button\"\r\n//             onClick={() => setLastDraw('')}\r\n//           >\r\n//             Remove Last Draw\r\n//           </button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {responseMessage && <p className=\"response-message\">{responseMessage}</p>}\r\n\r\n//       <div className=\"graph-container\">\r\n//         <div className=\"graph-item\">\r\n//           <h4>Dataframe</h4>\r\n//           {lastRow ? (\r\n//             <table className=\"dataframe-table\">\r\n//               <thead>\r\n//                 <tr>\r\n//                   <th>Number</th>\r\n//                   <th>Colour</th>\r\n//                   <th>Odd/Even</th>\r\n//                   <th>High/Low</th>\r\n//                   <th>Red Statistic</th>\r\n//                   <th>Black Statistic</th>\r\n//                   <th>Odd Statistic</th>\r\n//                   <th>Even Statistic</th>\r\n//                   <th>High Statistic</th>\r\n//                   <th>Low Statistic</th>\r\n//                 </tr>\r\n//               </thead>\r\n//               <tbody>\r\n//                 <tr>\r\n//                   <td>{lastRow.number}</td>\r\n//                   <td>{lastRow.colour}</td>\r\n//                   <td>{lastRow.odd_even}</td>\r\n//                   <td>{lastRow.high_low}</td>\r\n//                   <td>{lastRow.red_statistic}</td>\r\n//                   <td>{lastRow.black_statistic}</td>\r\n//                   <td>{lastRow.odd_statistic}</td>\r\n//                   <td>{lastRow.even_statistic}</td>\r\n//                   <td>{lastRow.high_statistic}</td>\r\n//                   <td>{lastRow.low_statistic}</td>\r\n//                 </tr>\r\n//               </tbody>\r\n//             </table>\r\n//           ) : (\r\n//             <p>Loading last row...</p>\r\n//           )}\r\n//         </div>\r\n\r\n//         <div className=\"graph-item\">\r\n//           <h4>Red-Black Graph</h4>\r\n//           <div className=\"graph-placeholder\">[Graph Placeholder]</div>\r\n//         </div>\r\n\r\n//         <div className=\"graph-item\">\r\n//           <h4>Odd-Even Graph</h4>\r\n//           <div className=\"graph-placeholder\">[Graph Placeholder]</div>\r\n//         </div>\r\n\r\n//         <div className=\"graph-item\">\r\n//           <h4>Low-High Graph</h4>\r\n//           <div className=\"graph-placeholder\">[Graph Placeholder]</div>\r\n//         </div>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default Graph;\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport './graphs.css';\r\n\r\nfunction Graph() {\r\n  const [lastDraw, setLastDraw] = useState('');\r\n  const [responseMessage, setResponseMessage] = useState('');\r\n  const [lastRow, setLastRow] = useState(null); // State to store the last row data\r\n  const [loading, setLoading] = useState(true); // State to track loading status\r\n\r\n  // Function to fetch the last row from the backend\r\n  const fetchLastRow = async () => {\r\n    try {\r\n      setLoading(true); // Set loading state to true before fetching\r\n      const response = await fetch('http://localhost:8000/get-last-row');\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch last row');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setLastRow(data.last_row); // Update state with the last row data\r\n    } catch (error) {\r\n      console.error('Error fetching last row:', error);\r\n      alert('An error occurred while fetching the last row.');\r\n    } finally {\r\n      setLoading(false); // Set loading state to false after fetch completes\r\n    }\r\n  };\r\n\r\n  // Fetch the last row only after a new draw is added\r\n  const handleAddLastDraw = async () => {\r\n    if (isNaN(lastDraw) || lastDraw.trim() === '') {\r\n      alert('Please enter a valid number for the last draw.');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const payload = { number: parseInt(lastDraw, 10) };\r\n      console.log('Payload sent to backend:', payload);\r\n\r\n      const response = await fetch('http://localhost:8000/add-last-draw', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(payload),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error('Failed to send last draw to the backend.');\r\n      }\r\n\r\n      const data = await response.json();\r\n      setResponseMessage(data.message || 'Last draw added successfully!');\r\n\r\n      // Fetch the updated last row data after successfully sending the draw\r\n      fetchLastRow();  // Fetch last row only after the draw is added\r\n    } catch (error) {\r\n      console.error('Error sending last draw:', error);\r\n      alert('An error occurred while sending the last draw.');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"graph\">\r\n      <div className=\"last-draw-container\">\r\n        <label htmlFor=\"last-draw\" className=\"last-draw-label\">\r\n          Last Draw:\r\n        </label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"last-draw\"\r\n          placeholder=\"Enter last draw\"\r\n          className=\"last-draw-input\"\r\n          value={lastDraw}\r\n          onChange={(e) => setLastDraw(e.target.value)}\r\n        />\r\n        <div className=\"last-draw-buttons\">\r\n          <button className=\"last-draw-button\" onClick={handleAddLastDraw}>\r\n            Add Last Draw\r\n          </button>\r\n          <button\r\n            className=\"last-draw-button\"\r\n            onClick={() => setLastDraw('')}\r\n          >\r\n            Remove Last Draw\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      {responseMessage && <p className=\"response-message\">{responseMessage}</p>}\r\n\r\n      <div className=\"graph-container\">\r\n        <div className=\"graph-item\">\r\n          <h4>Dataframe</h4>\r\n          {loading ? (\r\n            <p>Loading last row...</p> // Show loading message when fetching\r\n          ) : lastRow ? (\r\n            <table className=\"dataframe-table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Number</th>\r\n                  <th>Colour</th>\r\n                  <th>Odd/Even</th>\r\n                  <th>High/Low</th>\r\n                  <th>Red Statistic</th>\r\n                  <th>Black Statistic</th>\r\n                  <th>Odd Statistic</th>\r\n                  <th>Even Statistic</th>\r\n                  <th>High Statistic</th>\r\n                  <th>Low Statistic</th>\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                <tr>\r\n                  <td>{lastRow.number}</td>\r\n                  <td>{lastRow.colour}</td>\r\n                  <td>{lastRow.odd_even}</td>\r\n                  <td>{lastRow.high_low}</td>\r\n                  <td>{lastRow.red_statistic}</td>\r\n                  <td>{lastRow.black_statistic}</td>\r\n                  <td>{lastRow.odd_statistic}</td>\r\n                  <td>{lastRow.even_statistic}</td>\r\n                  <td>{lastRow.high_statistic}</td>\r\n                  <td>{lastRow.low_statistic}</td>\r\n                </tr>\r\n              </tbody>\r\n            </table>\r\n          ) : (\r\n            <p>No data available</p> // If no data, show a message\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"graph-item\">\r\n          <h4>Red-Black Graph</h4>\r\n          <div className=\"graph-placeholder\">[Graph Placeholder]</div>\r\n        </div>\r\n\r\n        <div className=\"graph-item\">\r\n          <h4>Odd-Even Graph</h4>\r\n          <div className=\"graph-placeholder\">[Graph Placeholder]</div>\r\n        </div>\r\n\r\n        <div className=\"graph-item\">\r\n          <h4>Low-High Graph</h4>\r\n          <div className=\"graph-placeholder\">[Graph Placeholder]</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Graph;\r\n\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtB,SAASC,KAAKA,CAAA,EAAG;EAAAC,EAAA;EACf,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,eAAe,EAAEC,kBAAkB,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACY,OAAO,EAAEC,UAAU,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9C;EACA,MAAMc,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACFD,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;MAClB,MAAME,QAAQ,GAAG,M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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}